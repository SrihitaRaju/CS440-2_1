#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <string>
#include <set>
#include "Cell.h"
#include <random>
#include <algorithm>
#include <cstdlib>
#include <queue>
#include <stack>
#include <chrono>

typedef std::pair<int,int> indexPair;
typedef std::vector< std::pair<int,int> > indexPairVector;
typedef std::vector<std::vector<Cell> > gridType;

bool unConstrained(std::pair<int, int> &pair, const gridType &vector);

indexPairVector getNeighbors(indexPair curr, const gridType & grid) {
    int x = curr.first, y = curr.second;
    std::vector< indexPair > toret;
    if(y > 0)
        toret.emplace_back(x,y-1);
    if(x > 0)
        toret.emplace_back(x-1,y);
    if(y < grid[0].size() - 1)
        toret.emplace_back(x,y+1);
    if(x < grid.size() - 1)
        toret.emplace_back(x+1,y);

    return toret;
}



bool assignment(const gridType & grid) {
    for (auto& line : grid) {
        for (auto &curr : line) {
            if (curr.empty)
                return false;
        }
    }

    //all colored now
    int count;
    for (auto& line : grid) {
        for (auto &curr : line) {

            count = 0;
            indexPairVector neighbors = getNeighbors({curr.x,curr.y}, grid);
            if(curr.type == "mid") {
                for (auto &neigh : neighbors) {
                    if (grid[neigh.first][neigh.second].color == curr.color)
                        count++;
                }
                if(count != 2)
                    return false;
            }

            count = 0;
            if(curr.type == "src") {
                for (auto &neigh : neighbors) {
                    if (grid[neigh.first][neigh.second].color == curr.color)
                        count++;
                }
                if(count != 1)
                    return false;
            }
        }
    }

    //all constraints satisfied
    return true;
}

//Do you think checking for full grid consistency makes more sense at each step?
bool stillConsistent(indexPair & curr, const gridType & grid) {

    //we know curr is not empty
    int count = 0;
    Cell currCell = grid[curr.first][curr.second];
    indexPairVector neighbors = getNeighbors(curr, grid);

    for(auto& nei : neighbors) {
        if(!grid[nei.first][nei.second].empty && grid[nei.first][nei.second].color == currCell.color)
            count++;
    }

    if (currCell.type == "mid" && count > 2)
        return false;
    else if (currCell.type == "src" && count > 1)
        return false;

    return true;

}



//Check if all neigbhors are also consistent
bool consistent(indexPair & curr, char color, gridType  grid) {
    int count = 0;
    Cell currCell = grid[curr.first][curr.second];
    indexPairVector neighbors = getNeighbors(curr, grid);

    for(auto& nei : neighbors) {
        if(!grid[nei.first][nei.second].empty && grid[nei.first][nei.second].color == color)
            count++;
    }


    if (currCell.type == "mid" && count > 2)
        return false;
    else if (currCell.type == "src" && count > 1)
        return false;

    //self cond satisfied, check for neighbors
    grid[curr.first][curr.second].color = color;
    grid[curr.first][curr.second].empty = false;
    for(auto& nei : neighbors) {
        if (!grid[nei.first][nei.second].empty && !stillConsistent(nei, grid))
            return false;
    }

    return true;
}






inline bool find_(std::vector<char> & curr, char value) {
    return (std::find(curr.begin(), curr.end(), value) != curr.end());
}






std::vector<char> leastConstrain(indexPair & param, gridType & grid) {


    int count;
    Cell neighColor;
    std::vector<char> toret;
    auto neighbors = getNeighbors(param, grid);
    Cell currCell = grid[param.first][param.second];
    std::vector<std::pair<char, int> > sortedValues;

    for(char col : currCell.valid) {

        count = 0;
        grid[param.first][param.second].empty = false;
        grid[param.first][param.second].color = col;

        for (auto &nei : neighbors) {
            count += unConstrained(nei, grid);
        }

        sortedValues.emplace_back(col, count);
        grid[param.first][param.second].empty = true;
        grid[param.first][param.second].color = '_';
    }


    sort( sortedValues.begin(), sortedValues.end( ), [ ]( const std::pair<char, int>& lhs, const std::pair<char, int>& rhs )
    {
        return lhs.second > rhs.second;
    });

    for(auto& i : sortedValues) {
        toret.push_back(i.first);
    }

    return toret;
}



bool unConstrained(indexPair &curr, const gridType &grid) {

    int count = 0;
    Cell currCell = grid[curr.first][curr.second];

    if(currCell.type == "src")
        return true;

    for(auto col : currCell.valid) {
        if(consistent(curr, col, grid))
            count++;
    }

    return (count == currCell.valid.size());
}




indexPair MRV(indexPairVector & unassigned, const gridType & grid) {

    auto it = std::min_element(begin(unassigned), end(unassigned),
                               [&grid] (indexPair  const& s1, indexPair  const& s2)
                               {
                                   return grid[s1.first][s1.second].valid.size() < grid[s2.first][s2.second].valid.size();
                               });

    indexPair toret = *it;
    unassigned.erase(it);
    return toret;
}








//changes valid of neighbors and checks if okay
bool forwardCheck(indexPair curr, gridType & grid) {


    Cell *neighCell;
    auto neighbors = getNeighbors(curr, grid);
    Cell currCell = grid[curr.first][curr.second];

    for (auto nei : neighbors) {
        neighCell = &(grid[nei.first][nei.second]);
        if (!neighCell->empty)
            continue;

        for (auto col : neighCell->valid) {
            if (!consistent(nei, col, grid)) {
                neighCell->valid.erase(std::remove(neighCell->valid.begin(), neighCell->valid.end(), col),
                                       neighCell->valid.end());
            }
        }
        if (neighCell->valid.empty())
            return false;
    }

    return true;

}









std::pair<gridType, bool> cspSolver(gridType iniGrid, indexPairVector totalunassigned, std::vector<char> colors) {

    int pos;
    gridType grid;
    indexPair var;
    std::vector<char> values;
    indexPairVector unassign;
    std::stack< std::pair <gridType, indexPairVector> > que;

    que.push({iniGrid, totalunassigned});

    while(!que.empty()) {

        //pop current state from stack
        grid = que.top().first;
        unassign = que.top().second;
        que.pop();


        //remove it from list
        var = MRV(unassign, grid);



//        //printing
//        for(auto& curr : grid) {
//            for(auto& c : curr)
//                std::cout << c.color ;
//
//            std::cout << std::endl;
//        }
//        std::cout << std::endl;


        //if at bottom of tree, just check if valid
        if (unassign.empty()) {
            if (assignment(grid))
                return {grid, true};
            else
                continue;
        }


        //loop through ordered color list
        values = leastConstrain(var, grid);
        for (auto &val : values) {
            if (consistent(var, val, grid)) {

                grid[var.first][var.second].color = val;
                grid[var.first][var.second].empty = false;

                if(!forwardCheck(var, grid))
                    continue;
                que.push({grid, unassign});
            }
        }
    }

    std::cout << "queue empty" << std::endl;
    return {grid, false};
}




int main() {

    bool res;
    gridType grid;
    int i =0, j = 0;
    std::string line;
    std::set<char> colors;
    indexPairVector unassign;


    //parsing input
    std::ifstream infile("inp.txt");
    while (std::getline(infile, line))
    {
        std::vector<Cell> curr;
        j = 0;
        for(auto& c: line) {
            Cell elem;
            elem.x = i;
            elem.y = j;
            if(c == '_') {
                elem.type = "mid";
                elem.color = '_';
                elem.empty = true;
                unassign.emplace_back(i,j);
            }
            else {
                elem.type = "src";
                elem.color = c;
                elem.empty = false;
                colors.insert(c);
            }
            curr.push_back(elem);
            j++;
        }
        grid.push_back(curr);
        i++;
    }


    //assigning valid colors
    std::vector<char> cols;
    for(auto& in: colors) {
        cols.push_back(in);
    }

    for(auto& curr : grid) {
        for (auto &c : curr) {
            if(c.type.compare("mid") == 0) {
                c.valid = cols;
            }
        }
    }

    //solving problem
    auto newgridparts = cspSolver(grid, unassign, cols);

    grid = newgridparts.first;
    res = newgridparts.second;

    if(!res)
        std::cout << "FAIL" << std::endl;


    //printing result
    for(auto& curr : grid) {
        for(auto& c : curr)
            std::cout << c.color ;

        std::cout << std::endl;
    }


}
//
// Created by Srihita Vatsavaya on 10/12/17.
//

